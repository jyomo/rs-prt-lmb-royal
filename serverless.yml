service: demoroyal
app: demoroyal-app
org: jvictor166

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  timeout: 30
  environment:
    database: modelbase
    host: database-2.ctslntac7luo.us-east-1.rds.amazonaws.com
    password: adminadmin
    port: 3306
    username: admin

package:
 individually: true
 excludeDevDependencies: false
 exclude:
   - 'src/**'
   - .*/**
   - /**
   - "*/**"
   - "*"
   - .DS_Store
   - build/**
   - tmp/**
   - .git/**
   - package-lock.json
   - 'tempv/**'
 include:
   - node_modules/**

custom:
  api_stage: intergracionapi
  nom_project: demoproject
  nom_lambda: victor
  nom_api: demoapi
  nom_api_usage: apiusagedemo

functions:

# 01. obtener modelo Swapi
  getDataModelSwapi:
    handler: src/LMBROY001DATASWAPIGET002/handlerGet.get
    name: LMBROY001DATASWAPIGET002
    description: Lambda de prueba.
    package:
      include:
        - 'src/LMBROY001DATASWAPIGET002/**'
    events:
      - http:
          path: model
          method: get
          integration: lambda
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - User
          private: true
          request:
            passThrough: WHEN_NO_TEMPLATES
            parameters:
              querystrings:
                resource: false
                id: false
                search: false
            template:
              application/json: |-
                    #set($inputRoot = $input.path('$'))
                    {
                        "resource": "$input.params('resource')",
                        "id": "$input.params('id')",
                        "search": "$input.params('search')"
                    }


# 02. obtener modelo personalizado de la BD
  getDataCustom:
    handler: src/LMBROY001DATABASEGET003/handlerGet.get
    name: LMBROY001DATABASEGET003
    description: Lambda de prueba.
    package:
      include:
        - 'src/LMBROY001DATABASEGET003/**'
    events:
      - http:
          path: custommodel
          method: get
          integration: lambda
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - User
          private: true
          request:
            passThrough: WHEN_NO_TEMPLATES
            parameters:
              querystrings:
                resource: false
            template:
              application/json: |-
                    #set($inputRoot = $input.path('$'))
                    {
                        "resource": "$input.params('resource')"
                    }
                    
                    

# resources:
#   Description: "xxx"
#   Resources:
#     # Api gateway
#     ApiGatewayRestApi:
#       Type: AWS::ApiGateway::RestApi
#       Properties:
#         Name: ${self:custom.nom_api}001
#         Description: Api para swapi.
#     ApiGatewayDeployment:
#       Type: AWS::ApiGateway::Deployment
#       DependsOn: 
#         - ApiGatewayRestApi
#       Properties:
#         Description: Despliegue para ${self:custom.api_stage}.
#         RestApiId:
#           Ref: ApiGatewayRestApi
#     ApiGatewayStage:
#       Type: 'AWS::ApiGateway::Stage'
#       DependsOn: 
#         - ApiGatewayRestApi
#         - ApiGatewayDeployment
#       Properties:
#         StageName: ${self:custom.api_stage}
#         Description: Etapa para ${self:custom.api_stage}.
#         RestApiId:
#           Ref: ApiGatewayRestApi
#         DeploymentId:
#           Ref: ApiGatewayDeployment
#         MethodSettings:
#           - ResourcePath: '/*'
#             HttpMethod: '*'
#             MetricsEnabled: 'true'
#             DataTraceEnabled: 'true'
#             LoggingLevel: INFO
#     usagePlanDeployment:
#       Type: 'AWS::ApiGateway::UsagePlan'
#       DependsOn: 
#         - ApiGatewayRestApi
#       Properties:
#         UsagePlanName: ${self:custom.nom_api_usage}001
#         Description: Plan de uso para consumir los servicios rest del modulo.
#         ApiStages:
#           - ApiId: !Ref ApiGatewayRestApi
#             Stage: ${self:custom.api_stage}

#   Outputs:
#     ApiUrl:
#       Description: URL del api.
#       Value: !Join 
#         - ''
#         - - 'https://'
#           - !Ref ApiGatewayRestApi
#           - .execute-api.
#           - !Ref 'AWS::Region'
#           - .
#           - !Ref 'AWS::URLSuffix'
#           - /${self:custom.api_stage}
#     ApiStage:
#       Description: Api stage de los servicios rest del modulo
#       Value: 
#         Ref: ApiGatewayStage